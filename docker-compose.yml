services:
  server: 
    restart: always
    depends_on: 
     - postgres
    build:
      context: .
      dockerfile: dockerfiles/server.Dockerfile
    env_file: 
      - ./server/.env
    environment: 
      - DOMAIN=${DOMAIN:?DOMAIN must be set}
      - ROOT_KEY=${ROOT_KEY:?ROOT_KEY must be set}
      - DATABASE_URL=postgres://enterprises:enterprises@postgres:5432/enterprises
    networks:
      - caddy
    develop:
      watch:
        - path: ./server
          target: /app/server
          ignore:
            - node_modules
          action: sync

  caddy:
    restart: always
    build:
      context: .
      dockerfile: dockerfiles/caddy.Dockerfile
    env_file:
      - .env
    environment: 
      - DOMAIN=${DOMAIN:?DOMAIN must be set}
      - CADDY_ADMIN=0.0.0.0:2019
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - caddy
    develop:
      watch:
        - path: ./Caddyfile
          target: /etc/caddy/Caddyfile
          ignore:
            - Caddyfile
          action: sync+exec
          exec: 
            command: caddy reload --config /etc/caddy/Caddyfile

  postgres:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: enterprises
      POSTGRES_PASSWORD: enterprises
      POSTGRES_DB: enterprises
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - caddy

  adminer:
    profiles:
      - dev
    image: ghcr.io/shyim/adminerevo:latest
    restart: always
    ports:
      - 8040:8080
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - caddy

networks:
  caddy:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
  postgres_data:

